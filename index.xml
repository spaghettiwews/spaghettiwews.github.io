<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>a blog of spaghettiwews</title>
    <link>https://wews.co/</link>
    <description>Recent content on a blog of spaghettiwews</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Mar 2019 19:05:54 +0200</lastBuildDate>
    
	<atom:link href="https://wews.co/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using the C# Compiler at the Command Line</title>
      <link>https://wews.co/cheatsheet/csharp/compiler/</link>
      <pubDate>Tue, 12 Mar 2019 19:05:54 +0200</pubDate>
      
      <guid>https://wews.co/cheatsheet/csharp/compiler/</guid>
      <description>C:\&amp;gt;csc /t:library /out:reslib.dll mysource.cs csc /t:winexe /r:ctls1.dll /r:ctls2.dll winapp.cs csc /keyfile:strongkey.snk secure.cs  </description>
    </item>
    
    <item>
      <title>Using the System.Text.RegularExpressions.Regex class</title>
      <link>https://wews.co/cheatsheet/csharp/regex/</link>
      <pubDate>Tue, 12 Mar 2019 18:52:23 +0200</pubDate>
      
      <guid>https://wews.co/cheatsheet/csharp/regex/</guid>
      <description>string zipexp = @&amp;quot;\d{5}((-|\s)?\d{4})?$&amp;quot;; string addr = &amp;quot;W.44th St, New York, NY 10017-0233&amp;quot;; Match m = Regex.Match(addr,zipexp); // Static method Regex zipRegex = new Regex(zipexp); m = zipRegex.Match(addr); // Use Regex Object Console.WriteLine(m.Value); // 10017-0233     Pattern Description Example     + Match one or more occurrence ab+c matches abc, abbc   * Match zero or more occurrences ab*c matches ac, abbc   ?</description>
    </item>
    
    <item>
      <title>Formatting Date Values</title>
      <link>https://wews.co/cheatsheet/csharp/formattingdatevalues/</link>
      <pubDate>Tue, 12 Mar 2019 14:27:08 +0200</pubDate>
      
      <guid>https://wews.co/cheatsheet/csharp/formattingdatevalues/</guid>
      <description>DateTime Formatting: (January 19, 2005 16:05:20) en-US
   Format Value Displayed Format Value Displayed     d 1/19/2005 Y or y January, 2005   D Wednesday, January 19, 2005 t 4:05 PM   f Wednesday, January 19, 2005 4:05:20 PM T 4:05:20 PM   F Wednesday, January 19, 2005 4:05 PM s 2005-01-19T16:05:20   g 1/19/2005 4:05 PM u 2005-01-19 16:05:20Z   G 1/19/2005 4:05:20 PM U Wednesday, January 19, 2005 21:05:20PM   M or m January 19      </description>
    </item>
    
    <item>
      <title>Formatting Numeric Values</title>
      <link>https://wews.co/cheatsheet/csharp/formattingnumericvalues/</link>
      <pubDate>Sun, 10 Mar 2019 18:04:04 +0200</pubDate>
      
      <guid>https://wews.co/cheatsheet/csharp/formattingnumericvalues/</guid>
      <description>Format Item Syntax: {index[,alignment] [:format string]}
index – Specifies element in list of values to which format is applied.
alignment – Indicates minimum width (in characters) to display value.
format string – Contains the code that specifies the format of the displayed value.
// Example: String.Format(&amp;quot;Price is: {0:C2}&amp;quot;, 49.95); // output: Price is: $ 49.95     Format Specifier Pattern Value Description     C or c {0:C2}, 1388.</description>
    </item>
    
    <item>
      <title>DateTime and TimeSpan</title>
      <link>https://wews.co/cheatsheet/csharp/datetime/</link>
      <pubDate>Sun, 10 Mar 2019 12:32:31 +0200</pubDate>
      
      <guid>https://wews.co/cheatsheet/csharp/datetime/</guid>
      <description>DateTime Constructor
DateTime(yr, mo, day); DateTime(yr, mo, day, hr, min, sec); DateTime bday = new DateTime(1964,12,20,11,2,0); DateTime newyr= DateTime.Parse(&amp;quot;1/1/2005&amp;quot;); DateTime currdt = DateTime.Now; // also AddHours, AddMonths, AddYears DateTime tomorrow = currdt.AddDays(1); TimeSpan diff = currdt.Subtract(bday); // 14795 days from 12/20/64 to 6/24/05 Console.WriteLine(&amp;quot;{0}&amp;quot;, diff.Days); // TimeSpan(hrs, min, sec) TimeSpan ts = new TimeSpan(6, 30, 10); // also FromMinutes, FromHours, FromDays TimeSpan ts = TimeSpan.FromSeconds(120); TimeSpan ts = ts2 – ts1; // +,-,&amp;gt;,&amp;lt;,==, !</description>
    </item>
    
    <item>
      <title>System.Text.StringBuilder</title>
      <link>https://wews.co/cheatsheet/csharp/stringbuilder/</link>
      <pubDate>Sun, 10 Mar 2019 12:03:26 +0200</pubDate>
      
      <guid>https://wews.co/cheatsheet/csharp/stringbuilder/</guid>
      <description>Constructor
StringBuilder sb = new StringBuilder(); StringBuilder sb = new StringBuilder(mystring); StringBuilder sb = new StringBuilder(mystring,capacity);  mystring – Initial value of StringBuilder object capacity – Initial size (characters) of buffer.
Using StringBuilderMembers
decimal bmi = 22.2M; int wt = 168; StringBuilder sb = new StringBuilder(&amp;quot;My weight is &amp;quot;); sb = sb.Append(wt); // can append number sb = sb.Append(&amp;quot; and my bmi is &amp;quot;).Append(bmi); // my weight is 168 and my bmi is 22.</description>
    </item>
    
    <item>
      <title>String Operations</title>
      <link>https://wews.co/cheatsheet/csharp/stringops/</link>
      <pubDate>Sat, 09 Mar 2019 07:44:37 +0200</pubDate>
      
      <guid>https://wews.co/cheatsheet/csharp/stringops/</guid>
      <description>Compare
String.Compare(stra, strb, case, ci)  bool case – true for case insensitiveci – new CultureInfo(&amp;ldquo;en-US&amp;rdquo;)returns: &amp;lt; 0 if a &amp;lt; b, 0 if a = b, 1 if a &amp;gt; b
IndexOf
str.IndexOf(val, start, num)  val – string to search forstart – where to begin in string
num – number of chars to search
returns (–1) if no match.
LastIndexOf
Search from end of string.
Replace
newstr = oldstr.</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://wews.co/cheatsheet/csharp/arrays/</link>
      <pubDate>Sat, 09 Mar 2019 07:32:21 +0200</pubDate>
      
      <guid>https://wews.co/cheatsheet/csharp/arrays/</guid>
      <description>Declaration
int[] numArray = {1903, 1907, 1910}; int[] numArray = new int[3]; // 3 rows and 2 columns int[ , ] nums = {{1907, 1990}, {1904, 1986}, {1910, 1980}};  Array Operations
Array.Sort(numArray); // sort ascending // Sort begins at element 4 and sorts 10 elements Array.Sort(numArray, 4,10); // Use one array as a key and sort two arrays string[] values = {&amp;quot;Cary&amp;quot;, &amp;quot;Gary&amp;quot;, &amp;quot;Barbara&amp;quot;}; string[] keys = {&amp;quot;Grant&amp;quot;, &amp;quot;Cooper&amp;quot;, &amp;quot;Stanwyck&amp;quot;}; Array.</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://wews.co/cheatsheet/csharp/datatypes/</link>
      <pubDate>Thu, 07 Mar 2019 19:30:34 +0200</pubDate>
      
      <guid>https://wews.co/cheatsheet/csharp/datatypes/</guid>
      <description>Primitive Size Example     string 2 bytes/char s = “reference”;   bool  b = true;   char 2 bytes ch = ‘a’;   byte 1 byte b = 0x78;   short 2 bytes Ival = 54;   int 4 bytes Ival = 540;   long 8 bytes ival = 5400;   float 4 bytes val = 54.</description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>https://wews.co/page/resume/</link>
      <pubDate>Mon, 25 Feb 2019 21:29:15 +0200</pubDate>
      
      <guid>https://wews.co/page/resume/</guid>
      <description>Welington Maposa Education Bachelor of Technology Honours Degree in Computer Science Harare Institute of Technology: December 2008 – June 2012

Skills Business Analysis, Solution Design, Application Development, Project Management - SDLC, Kanban, Online Payments, Security, Accessibility and Usability, Performance, Research, Recruitment

Tech  PHP, Javascript, Node.js, C#, RESTful APIs, MySql Content Management Systems, Woocommerce, Laravel, Shopify Git, CI/CD, SSH Agile, Waterfall, Object Oriented Design &amp;amp; Development, MVC Microsoft Visual Studio, VS Code, Postman, Docker, Virtualbox, Bash, DevTools</description>
    </item>
    
    <item>
      <title>On starting a new decade</title>
      <link>https://wews.co/post/11110/</link>
      <pubDate>Mon, 18 Feb 2019 01:15:45 +0200</pubDate>
      
      <guid>https://wews.co/post/11110/</guid>
      <description>  bring it source: matrix revolutions | giphy
  </description>
    </item>
    
    <item>
      <title>A list of open source projects</title>
      <link>https://wews.co/post/open-source/</link>
      <pubDate>Sun, 17 Feb 2019 15:32:47 +0200</pubDate>
      
      <guid>https://wews.co/post/open-source/</guid>
      <description>I like well designed software. I also like free things, as I&amp;rsquo;m sure do you. Every now and again these two qualities/properties/attributes intersect and I&amp;rsquo;ll stumble upon a free, cool piece of software that I reckon may be useful to me (or you) in the future. While there&amp;rsquo;s a 90% chance that I won&amp;rsquo;t ever use most of these, here&amp;rsquo;s a running list of said applications/systems/software nonetheless:
 Grafana - The open platform for analytics and monitoring  https://grafana.</description>
    </item>
    
    <item>
      <title>Using a reverse proxy to provide ssl to a wordpress site hosted on a non-https server</title>
      <link>https://wews.co/post/sucuri-ssl/</link>
      <pubDate>Fri, 22 Jun 2018 22:10:28 +0200</pubDate>
      
      <guid>https://wews.co/post/sucuri-ssl/</guid>
      <description>What&amp;rsquo;s a reverse proxy? well, in this context, wikipedia has this to say:  In computer networks, a reverse proxy is a type of proxy server that retrieves resources on behalf of a client from one or more servers.
In the case of secure websites, a web server may not perform SSL encryption itself, but instead offloads the task to a reverse proxy that may be equipped with SSL acceleration hardware.</description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>https://wews.co/post/hello-hugo/</link>
      <pubDate>Sat, 12 May 2018 12:28:05 +0200</pubDate>
      
      <guid>https://wews.co/post/hello-hugo/</guid>
      <description>Well hello there. This here is how this started:
hugo -t black-and-light cd public git add . git commmit -m &amp;quot;initial commit&amp;quot; git push  </description>
    </item>
    
  </channel>
</rss>